unit stm32g0;

{$mode objfpc}{$H+}

{$define USBPD_REV30_SUPPORT}
{.$define CALIBRATION}

interface

uses
  Classes,usbcpd;

type
  TTRACE_MESSAGE = record
    //TagPreamble:array[0..3] of byte;
    TagID:byte;
    TageLength:word;
    TageType:byte;
    TagTime:dword;
    TagPort:byte;
    TagSOP:byte;
    TagDataLength:word;
    TagData:array of byte;
    //TagPostamble:array[0..3] of byte;
  end;

  TPE_STATE_MESSAGES = (
    PE_DISABLED_STATE                      = 0,
    PE_SRC_GIVE_SRC_CAP                    = 2,
    PE_STATE_READY                         = 3,
    PE_STATE_READY_WAIT                    = 4,
    PE_SRC_VDM_DISCOVERY_REQUEST           = 5,
    PE_SRC_SEND_CAPABILITIES               = 7,
    PE_SRC_DISCOVERY                       = 8,
    PE_SRC_NEGOTIATE_CAPABILITY            = 9,
    PE_SRC_TRANSITION_SUPPLY               = 12,
    PE_SRC_TRANSITION_SUPPLY_EXIT          = 13,
    PE_STATE_HARD_RESET1                   = 15,
    PE_SRC_SEND_SOFT_RESET                 = 17,
    PE_CAD_STATE_ATTACHED                  = 19,
    PE_CAD_STATE_DETACHED                  = 21,
    PE_SRC_WAIT_REQUEST                    = 22,
    PE_CAD_STATE_ATTACHED_WAIT             = 23,
    PE_STATE_REQUEST_GETSNKCAP             = 24,
    PE_SRC_REQUEST_GETSNKCAP_WAITANSWER    = 25,
    PE_STATE_REQUEST_GETSRCCAP             = 26,
    PE_STATE_REQUEST_POWERSWAP             = 30,
    PE_SRC_ANSWER_POWERSWAP                = 31,
    PE_SRC_REQUEST_POWERSWAP_ACCEPTED      = 32,
    PE_SRC_REQUEST_POWERSWAP_WAIT_PSREADY  = 33,
    PE_PRS_SRC_SWITCH2SNK                  = 38,
    PE_STATE_SEND_CTRLMESSAGE              = 46,
    PE_STATE_SEND_EXTENDED_MESSAGE         = 49,
    PE_STATE_EXTENDED_WAITRESPONSE         = 57,
    PE_SNK_STARTUP                         = 62,
    PE_SNK_HARD_RESET_WAIT                 = 64,
    PE_SNK_WAIT_FOR_CAPABILITIES           = 67,
    PE_SNK_EVALUATE_CAPABILITY             = 68,
    PE_SNK_SEND_REQUEST                    = 69,
    PE_SNK_SELECT_CAPABILITY               = 70,
    PE_SNK_TRANSITION_SNK                  = 71,
    PE_STATE_HARD_RESET2                   = 80,
    PE_SNK_SRC_ASSERT_RP                   = 83,
    PE_STATE_REQUEST_POWERSWAP_ANSWER      = 88,
    PE_SNK_POWERSWAP_WAIT_PSREADY          = 89,
    PE_SNK_POWERSWAP_WAIT_SWAPTIMER        = 91,
    PE_WAIT_DATARESPONSE                   = 116,
    PE_SVDM_REQ_GET_IDENTITY               = 125,
    PE_SVDM_REQ_GET_SVID                   = 127,
    PE_SVDM_WAIT_GET_IDENTITY              = 135,
    PE_SVDM_WAIT_GET_SVID                  = 137,
    PE_SRC_STARTUP                         = 146,
    PE_SRC_VDM_DISCOVERY_REQUEST_ANSWER    = 154,
    PE_SNK_HARD_RESET_WAIT_VSAFE_0V        = 155,
    PE_VCS_SEND_SWAP                       = 162,
    PE_VCS_SEND_SWAP_ANSWER                = 163,
    PE_CABLE_VDM_DISCOVERY_REQUEST_ANSWER  = 164
    );

const
  GUI_NOTIF_NUMBEROFRCVSNKPDO                    = (1 shl 0);
  GUI_NOTIF_RDOPOSITION                          = (1 shl 1);
  GUI_NOTIF_LISTOFRCVSRCPDO                      = (1 shl 2);
  GUI_NOTIF_NUMBEROFRCVSRCPDO                    = (1 shl 3);
  GUI_NOTIF_LISTOFRCVSNKPDO                      = (1 shl 4);
  GUI_NOTIF_ISCONNECTED                          = (1 shl 5);
  GUI_NOTIF_DATAROLE                             = (1 shl 6);
  GUI_NOTIF_POWERROLE                            = (1 shl 7);
  GUI_NOTIF_CCDEFAULTCURRENTADVERTISED           = (1 shl 8);
  GUI_NOTIF_VCONNON                              = (1 shl 9);
  GUI_NOTIF_VCONNSWAPED                          = (1 shl 10);
  GUI_NOTIF_MEASUREREPORTING                     = (1 shl 11);
  GUI_NOTIF_CC                                   = (1 shl 12);
  GUI_NOTIF_PE_EVENT                             = (1 shl 13);
  GUI_NOTIF_TIMESTAMP                            = (1 shl 14);
  GUI_NOTIF_POWER_EVENT                          = (1 shl 15);

type
  USBPD_SOPTYPE =
  (
    USBPD_SOPTYPE_SOP,
    USBPD_SOPTYPE_SOP1,
    USBPD_SOPTYPE_SOP2,
    USBPD_SOPTYPE_SOP1_DEBUG,
    USBPD_SOPTYPE_SOP2_DEBUG,
    USBPD_SOPTYPE_HARD_RESET,
    USBPD_SOPTYPE_CABLE_RESET,
    USBPD_SOPTYPE_BIST_MODE_2
  );

  USBPD_NOTIFY =
  (
    USBPD_NOTIFY_DUMMY,
    USBPD_NOTIFY_REQUEST_ACCEPTED,
    USBPD_NOTIFY_REQUEST_REJECTED,
    USBPD_NOTIFY_REQUEST_WAIT,
    USBPD_NOTIFY_REQUEST_GOTOMIN,
    USBPD_NOTIFY_GETSNKCAP_SENT,
    USBPD_NOTIFY_GETSNKCAP_RECEIVED,
    USBPD_NOTIFY_GETSNKCAP_ACCEPTED,
    USBPD_NOTIFY_GETSNKCAP_REJECTED,
    USBPD_NOTIFY_GETSNKCAP_TIMEOUT,
    USBPD_NOTIFY_SNKCAP_SENT,
    USBPD_NOTIFY_GETSRCCAP_SENT,
    USBPD_NOTIFY_GETSRCCAP_RECEIVED,
    USBPD_NOTIFY_GETSRCCAP_ACCEPTED,
    USBPD_NOTIFY_GETSRCCAP_REJECTED,
    USBPD_NOTIFY_SRCCAP_SENT,
    USBPD_NOTIFY_POWER_EXPLICIT_CONTRACT,
    USBPD_NOTIFY_POWER_SRC_READY,
    USBPD_NOTIFY_POWER_SNK_READY,
    USBPD_NOTIFY_POWER_SNK_STOP,
    USBPD_NOTIFY_POWER_SWAP_TO_SNK_DONE,
    USBPD_NOTIFY_POWER_SWAP_TO_SRC_DONE,
    USBPD_NOTIFY_POWER_SWAP_REJ,
    USBPD_NOTIFY_POWER_SWAP_NOT_SUPPORTED,
    USBPD_NOTIFY_RESISTOR_ASSERT_RP,
    USBPD_NOTIFY_RESISTOR_ASSERT_RD,
    USBPD_NOTIFY_CABLERESET_REQUESTED,
    USBPD_NOTIFY_PROTOCOL_ERROR,
    USBPD_NOTIFY_VCONN_SWAP_NOT_COMPLETED,
    USBPD_NOTIFY_SVDM_TIMEOUT,
    USBPD_NOTIFY_HARDRESET_RX,
    USBPD_NOTIFY_HARDRESET_TX,
    USBPD_NOTIFY_STATE_SNK_READY,
    USBPD_NOTIFY_STATE_SRC_DISABLED,
    USBPD_NOTIFY_DATAROLESWAP_SENT,
    USBPD_NOTIFY_DATAROLESWAP_RECEIVED,
    USBPD_NOTIFY_DATAROLESWAP_UFP,
    USBPD_NOTIFY_DATAROLESWAP_DFP,
    USBPD_NOTIFY_DATAROLESWAP_WAIT,
    USBPD_NOTIFY_DATAROLESWAP_REJECTED,
    USBPD_NOTIFY_DATAROLESWAP_NOT_SUPPORTED,
    USBPD_NOTIFY_GOTOMIN_SENT,
    USBPD_NOTIFY_GOTOMIN_POWERREADY,
    USBPD_NOTIFY_SNK_GOTOMIN,
    USBPD_NOTIFY_SNK_GOTOMIN_READY,
    USBPD_NOTIFY_REQUEST_ERROR,
    USBPD_NOTIFY_REQUEST_COMPLETE,
    USBPD_NOTIFY_REQUEST_CANCELED,
    USBPD_NOTIFY_SOFTRESET_SENT,
    USBPD_NOTIFY_SOFTRESET_ACCEPTED,
    USBPD_NOTIFY_SOFTRESET_RECEIVED,
    USBPD_NOTIFY_PING_RECEIVED,
    USBPD_NOTIFY_REQUEST_ENTER_MODE,
    USBPD_NOTIFY_REQUEST_ENTER_MODE_ACK,
    USBPD_NOTIFY_REQUEST_ENTER_MODE_NAK,
    USBPD_NOTIFY_REQUEST_ENTER_MODE_BUSY,
    USBPD_NOTIFY_PD_SPECIFICATION_CHANGE,
    USBPD_NOTIFY_POWER_SWAP_SENT,
    USBPD_NOTIFY_POWER_SWAP_ACCEPTED,
    USBPD_NOTIFY_POWER_SWAP_WAIT,
    USBPD_NOTIFY_POWER_SWAP_RECEIVED,
    USBPD_NOTIFY_VCONN_SWAP_RECEIVED,
    USBPD_NOTIFY_VCONN_SWAP_SENT,
    USBPD_NOTIFY_VCONN_SWAP_ACCEPTED,
    USBPD_NOTIFY_VCONN_SWAP_WAIT,
    USBPD_NOTIFY_VCONN_SWAP_REJECTED,
    USBPD_NOTIFY_VCONN_SWAP_COMPLETE,
    USBPD_NOTIFY_VCONN_SWAP_NOT_SUPPORTED,
    USBPD_NOTIFY_CTRL_MSG_SENT,
    USBPD_NOTIFY_DATA_MSG_SENT,
    USBPD_NOTIFY_GET_SRC_CAP_EXT_RECEIVED,
    USBPD_NOTIFY_SRC_CAP_EXT_RECEIVED,
    USBPD_NOTIFY_SRC_CAP_EXT_SENT,
    USBPD_NOTIFY_GET_PPS_STATUS_RECEIVED,
    USBPD_NOTIFY_GET_PPS_STATUS_SENT,
    USBPD_NOTIFY_PPS_STATUS_RECEIVED,
    USBPD_NOTIFY_PPS_STATUS_SENT,
    USBPD_NOTIFY_GET_STATUS_RECEIVED,
    USBPD_NOTIFY_STATUS_RECEIVED,
    USBPD_NOTIFY_STATUS_SENT,
    USBPD_NOTIFY_ALERT_RECEIVED,
    USBPD_NOTIFY_VDM_IDENTIFY_RECEIVED,
    USBPD_NOTIFY_VDM_CABLE_IDENT_RECEIVED,
    USBPD_NOTIFY_VDM_SVID_RECEIVED,
    USBPD_NOTIFY_VDM_MODE_RECEIVED,
    USBPD_NOTIFY_REQUEST_EXIT_MODE,
    USBPD_NOTIFY_REQUEST_EXIT_MODE_ACK,
    USBPD_NOTIFY_REQUEST_EXIT_MODE_NAK,
    USBPD_NOTIFY_REQUEST_EXIT_MODE_BUSY,
    USBPD_NOTIFY_MSG_NOT_SUPPORTED,
    USBPD_NOTIFY_POWER_STATE_CHANGE,
    USBPD_NOTIFY_REQUEST_DISCARDED,
    USBPD_NOTIFY_AMS_INTERRUPTED,
    USBPD_NOTIFY_ALERT_SENT,
    USBPD_NOTIFY_CABLERESET_TX,
    USBPD_NOTIFY_PE_DISABLED,
    USBPD_NOTIFY_GET_SNK_CAP_EXT_RECEIVED,
    USBPD_NOTIFY_SNK_CAP_EXT_SENT,
    USBPD_NOTIFY_SNK_CAP_EXT_RECEIVED,
    USBPD_NOTIFY_DETACH,
    USBPD_NOTIFY_CABLERESET_RX,
    USBPD_NOTIFY_BIST_SHARED_TEST_MODE_ENTRY,
    USBPD_NOTIFY_BIST_SHARED_TEST_MODE_EXIT,
    USBPD_NOTIFY_STATE_SRC_READY,
    USBPD_NOTIFY_USBSTACK_START,
    USBPD_NOTIFY_USBSTACK_STOP
  );

  TMESSAGE_TYPE =
  (
    DUMMY,
    DPM_RESET_REQ,
    DPM_INIT_REQ,
    DPM_INIT_CNF,
    DPM_CONFIG_GET_REQ,
    DPM_CONFIG_GET_CNF,
    DPM_CONFIG_SET_REQ,
    DPM_CONFIG_SET_CNF,
    DPM_CONFIG_REJ,
    DPM_MESSAGE_REQ,
    DPM_MESSAGE_CNF,
    DPM_MESSAGE_REJ,
    DPM_MESSAGE_IND,
    DPM_MESSAGE_RSP,
    DPM_REGISTER_READ_REQ,
    DPM_REGISTER_READ_CNF,
    DPM_REGISTER_WRITE_REQ,
    DPM_REGISTER_WRITE_CNF,
    DEBUG_STACK_MESSAGE
  );

  TRACE_EVENT = (
    USBPD_TRACE_FORMAT_TLV,
    USBPD_TRACE_MESSAGE_IN,
    USBPD_TRACE_MESSAGE_OUT,
    USBPD_TRACE_CADEVENT,
    USBPD_TRACE_PE_STATE,
    USBPD_TRACE_CAD_LOW,
    USBPD_TRACE_DEBUG,
    USBPD_TRACE_SRC,
    USBPD_TRACE_SNK,
    USBPD_TRACE_NOTIF,
    USBPD_TRACE_POWER,
    USBPD_TRACE_TCPM,
    USBPD_TRACE_PRL_STATE,
    USBPD_TRACE_PRL_EVENT,
    USBPD_TRACE_PHY_NOTFRWD,
    USBPD_TRACE_CPU,
    USBPD_TRACE_TIMEOUT
  );

  TUSBPD_CAD_EVENT =
  (
    USBPD_CAD_EVENT_NONE,
    USBPD_CAD_EVENT_DETACHED,
    USBPD_CAD_EVENT_ATTACHED,
    USBPD_CAD_EVENT_EMC,
    USBPD_CAD_EVENT_ATTEMC,
    USBPD_CAD_EVENT_ACCESSORY,
    USBPD_CAD_EVENT_DEBUG,
    USBPD_CAD_EVENT_LEGACY,
    USPPD_CAD_EVENT_VPD,
    USPPD_CAD_EVENT_UNKNOW
  );

  GUI_INIT_TAG =
  (
    GUI_INIT_HWBOARDVERSION,
    GUI_INIT_HWPDTYPE,
    GUI_INIT_NBPORTMAX,
    GUI_INIT_FWVERSION,
    GUI_INIT_TYPECSPECREVISION,
    GUI_INIT_DUMMY1,
    GUI_INIT_EXTENDEDMESSAGESUNCKUNKED,
    GUI_INIT_ACCESSORYSUPP,
    GUI_INIT_POWERACCESSORYDETECTION,
    GUI_INIT_POWERACCESSORYTRANSITION,
    GUI_INIT_DUMMY2,
    GUI_INIT_ISCABLE,
    GUI_INIT_DUMMY3,
    GUI_INIT_DUMMY4,
    GUI_INIT_DUMMY5,
    GUI_INIT_DUMMY6,
    GUI_INIT_TRYFEATURE,
    GUI_INIT_DUMMY7,
    GUI_INIT_RPRESISTORVALUE,
    GUI_INIT_USBSUPPORT,
    GUI_INIT_USBDEVICE,
    GUI_INIT_USBHOST,
    GUI_INIT_UNCONSTRAINED_POWERED,
    GUI_INIT_USBSUSPENDSUPPORT,
    GUI_INIT_VCONNDISCHARGE,
    GUI_INIT_VCONNILIM,
    GUI_INIT_VCONNILIMVALUE,
    GUI_INIT_VCONNMONITORING,
    GUI_INIT_VCONNTHRESHOLDUVLO,
    GUI_INIT_VCONNSUPPLY,
    GUI_INIT_NB_PORT_START,
    GUI_INIT_ORIGINAL_SETTINGS
    {$ifndef CALIBRATION}
    ,
    GUI_INIT_VOLTAGE_SLOPE,
    GUI_INIT_VOLTAGE_OFFSET,
    GUI_INIT_CURRENT_SLOPE,
    GUI_INIT_CURRENT_OFFSET,
    GUI_INIT_CALIBRATION_DATE
    {$endif}
  );


  GUI_TAG =
  (
    GUI_IND_NUMBEROFRCVSNKPDO,                 // The number of received Sink Power Data Objects from
                                               //    port Partner (when Port partner is a Sink or a DRP port)
    GUI_IND_RDOPOSITION,                       // RDO Position of requested DO in Source list of capabilities */
    GUI_IND_LISTOFRCVSRCPDO,                   // The list of received Source Power Data Objects from
                                               //    Port partner (when Port partner is a Source or a DRP port) */
    GUI_IND_NUMBEROFRCVSRCPDO,                 // The number of received Source Power Data Objects from
                                               //    Port Partner (when Port partner is a Source or a DRP port) */
    GUI_IND_LISTOFRCVSNKPDO,                   // The list of received Sink Power Data Objects from
                                               //    Port partner (when Port partner is a Sink or a DRP port) */
    GUI_IND_ISCONNECTED,                       // USB PD connection state */
    GUI_IND_CC,                                // CC side */
    GUI_IND_DATAROLE,                          // It defines the initial data role. */
    GUI_IND_POWERROLE,                         // It defines the power role. */
    GUI_IND_CCDEFAULTCURRENTADVERTISED,        // advertising the current capability */
    GUI_IND_VCONNON,                           // Vconn Status */
    GUI_IND_DUMMY1,
    GUI_IND_VIBUS_LEVEL,                       // V/I BUS level */
    GUI_IND_PD_SPECREVISION,                   // Selected Specification revision */
    GUI_IND_PD_MESSAGENOTIF,                   // Send notifications of PD messages */
    GUI_IND_NBBATTERIES,                       // Number of batteries supported by the devices. */
    GUI_IND_COUNTRYCODES,                      // List of the country codes received
                                               //    in the COUNTRY_CODES message */
    GUI_IND_SVDM_SVIDS,                        // List of the SVDM SVID received
                                               //    in the SVDM Discovery SVID message */
    GUI_IND_SVDM_MODES,                        // List of the country codes received
                                               //    in the SVDM Discovery SVID message */
    GUI_IND_TIMESTAMP,                         // Timestamp used for VBUS and IBUS values */
    GUI_IND_PPS,                               // PPS value based on @ref USBPD_PPSSDB_TypeDef */
    GUI_IND_STATUS,                            // Status value based on @ref USBPD_SDB_TypeDef */
    GUI_IND_VDM_IDENTITY,                      // VDM Identity based on @ref USBPD_IDHeaderVDO_TypeDef */
    GUI_IND_DUMMY2,
    GUI_IND_DUMMY3,
    GUI_IND_CABLE_VDO,                         // VDM Cable Object based on @ref USBPD_CableVdo_TypeDef */
    GUI_IND_ALL                                // Number max of indication */
  );

  GUI_PARAM_TAG =
  (
    GUI_PARAM_SOP,
    GUI_PARAM_DUMMY1,
    GUI_PARAM_FASTROLESWAP,
    GUI_PARAM_DATAROLESWAP_TO_UFP,
    GUI_PARAM_DEFAULTPOWERROLE,
    GUI_PARAM_DRP_SUPPORT,
    GUI_PARAM_CADROLETOGGLE,
    GUI_PARAM_PE_SCAP_HR,
    GUI_PARAM_VCONNSWAP,
    GUI_PARAM_VDM_SUPPORT,
    GUI_PARAM_PING_SUPPORT,
    GUI_PARAM_SUPPORT,
    GUI_PARAM_SNK_PDO,
    GUI_PARAM_SRC_PDO,
    GUI_PARAM_TDRP,
    GUI_PARAM_DCSRC_DRP,
    GUI_PARAM_RESPONDS_TO_DISCOV_SOP,
    GUI_PARAM_ATTEMPTS_DISCOV_SOP,
    GUI_PARAM_XID_SOP,
    GUI_PARAM_DATA_CAPABLE_AS_USB_HOST_SOP,
    GUI_PARAM_DATA_CAPABLE_AS_USB_DEVICE_SOP,
    GUI_PARAM_PRODUCT_TYPE_SOP,
    GUI_PARAM_MODAL_OPERATION_SUPPORTED_SOP,
    GUI_PARAM_USB_VID_SOP,
    GUI_PARAM_PID_SOP,
    GUI_PARAM_BCDDEVICE_SOP,
    GUI_PARAM_MEASUREREPORTING,
    GUI_PARAM_MANUINFOPORT,
    GUI_PARAM_DATAROLESWAP_TO_DFP
  );

  GUI_MESSAGE_TAG =
  (
    GUI_MSG_GOTOMIN,
    GUI_MSG_PING,
    GUI_MSG_DUMMY1,
    GUI_MSG_GET_SRC_CAPA,
    GUI_MSG_GET_SNK_CAPA,
    GUI_MSG_DR_SWAP,
    GUI_MSG_PR_SWAP,///
    GUI_MSG_VCONN_SWAP,
    GUI_MSG_SOFT_RESET,
    GUI_MSG_GET_SOURCE_CAPA_EXTENDED,
    GUI_MSG_GET_STATUS,
    GUI_MSG_FR_SWAP,
    GUI_MSG_GET_PPS_STATUS,
    GUI_MSG_GET_COUNTRY_CODES,
    GUI_MSG_SOURCE_CAPA,
    GUI_MSG_REQUEST,
    GUI_MSG_DUMMY2,
    GUI_MSG_ALERT,
    GUI_MSG_GET_COUNTRY_INFO,
    GUI_MSG_VDM_DISCO_IDENT,
    GUI_MSG_VDM_DISCO_SVID,
    GUI_MSG_VDM_DISCO_MODE,
    GUI_MSG_VDM_ENTER_MODE,
    GUI_MSG_VDM_EXIT_MODE,
    GUI_MSG_VDM_ATTENTION,
    GUI_MSG_VDM_UNSTRUCTURED,
    GUI_MSG_FREE_TEXT,
    GUI_MSG_DUMMY3,
    GUI_MSG_DUMMY4,
    GUI_MSG_DUMMY5,
    GUI_MSG_DUMMY6,
    GUI_MSG_DUMMY7,
    GUI_MSG_DISPLAY_PORT_STATUS,
    GUI_MSG_DISPLAY_PORT_CONFIG,
    GUI_MSG_DISPLAY_PORT_ATTENTION,
    GUI_MSG_DUMMY8,
    GUI_MSG_HARD_RESET,
    GUI_MSG_CABLE_RESET,
    GUI_MSG_GET_BAT_CAPA,
    GUI_MSG_GET_BAT_STATUS,
    GUI_MSG_GET_MANU_INFO,
    GUI_MSG_SECU_REQUEST,
    GUI_MSG_FIRM_UPDATE_REQUEST,
    GUI_MSG_GET_SINK_CAPA_EXTENDED
  );

  GUI_MESSAGE_PARAMS_TAG =
  (
    GUI_PARAM_MSG_SOPTYPE,
    GUI_PARAM_MSG_RDOPOSITION,
    GUI_PARAM_MSG_REQUESTEDVOLTAGE,
    GUI_PARAM_MSG_DUMMY1,
    GUI_PARAM_MSG_ALERTMSG,
    GUI_PARAM_MSG_COUNTRYCODE,
    GUI_PARAM_MSG_SVDM_SVID,
    GUI_PARAM_MSG_SVDM_MODEINDEX,
    GUI_PARAM_MSG_UVDM_DATA,
    GUI_PARAM_MSG_DP_STATUS,
    GUI_PARAM_MSG_DP_CONFIGURE,
    GUI_PARAM_MSG_DP_ATTENTION,
    GUI_PARAM_MSG_BATTERYREF,
    GUI_PARAM_MSG_MANUINFODATA,
    GUI_PARAM_MSG_FREE_TEXT,
    GUI_PARAM_MSG_ALL
  );

  USBPD_GUI_REJECT_REASON =
  (
    GUI_REJ_DPM_REJECT,
    GUI_REJ_DPM_BUSY,
    GUI_REJ_DPM_TIMEOUT,
    GUI_REJ_DPM_INVALID_MESSAGE,
    GUI_REJ_DPM_OUT_OF_RANGE,
    GUI_REJ_DPM_INVALID_PORT_NUMBER,
    GUI_REJ_DPM_NOT_READY
  );

  USBPD_POWER_NO =
  (
    NOPOWER,            //*!< No power contract                      */
    DEFAULT5V,          //*!< Default 5V                             */
    IMPLICITCONTRACT,   //*!< Implicit contract                      */
    EXPLICITCONTRACT,   //*!< Explicit contract                      */
    TRANSITION          //*!< Power transition                       */
  );

  USBPD_GUI_State =
  (
    GUI_STATE_INIT,
    GUI_STATE_RUNNING,
    GUI_STATE_RESET
  );

  TUSBPDController = class(TUSBPD)
  end;

  function GetPEStateInfo(aState:TPE_STATE_MESSAGES):string;

implementation

uses
  SysUtils;

function GetPEStateInfo(aState:TPE_STATE_MESSAGES):string;
begin
  case aState of
    TPE_STATE_MESSAGES.PE_DISABLED_STATE: result:='PE_DISABLED_STATE';
    TPE_STATE_MESSAGES.PE_SRC_GIVE_SRC_CAP: result:='PE_SRC_GIVE_SRC_CAP';
    TPE_STATE_MESSAGES.PE_STATE_READY: result:='PE_STATE_READY';
    TPE_STATE_MESSAGES.PE_STATE_READY_WAIT: result:='PE_STATE_READY_WAIT';
    TPE_STATE_MESSAGES.PE_SRC_VDM_DISCOVERY_REQUEST: result:='PE_SRC_VDM_DISCOVERY_REQUEST';
    TPE_STATE_MESSAGES.PE_SRC_SEND_CAPABILITIES: result:='PE_SRC_SEND_CAPABILITIES';
    TPE_STATE_MESSAGES.PE_SRC_DISCOVERY: result:='PE_SRC_DISCOVERY';
    TPE_STATE_MESSAGES.PE_SRC_NEGOTIATE_CAPABILITY: result:='PE_SRC_NEGOTIATE_CAPABILITY';
    TPE_STATE_MESSAGES.PE_SRC_TRANSITION_SUPPLY: result:='PE_SRC_TRANSITION_SUPPLY';
    TPE_STATE_MESSAGES.PE_SRC_TRANSITION_SUPPLY_EXIT: result:='PE_SRC_TRANSITION_SUPPLY_EXIT';
    TPE_STATE_MESSAGES.PE_STATE_HARD_RESET1: result:='PE_STATE_HARD_RESET1';
    TPE_STATE_MESSAGES.PE_SRC_SEND_SOFT_RESET: result:='PE_SRC_SEND_SOFT_RESET';
    TPE_STATE_MESSAGES.PE_SRC_WAIT_REQUEST: result:='PE_SRC_WAIT_REQUEST';
    TPE_STATE_MESSAGES.PE_STATE_REQUEST_GETSNKCAP: result:='PE_STATE_REQUEST_GETSNKCAP';
    TPE_STATE_MESSAGES.PE_SRC_REQUEST_GETSNKCAP_WAITANSWER: result:='PE_SRC_REQUEST_GETSNKCAP_WAITANSWER';
    TPE_STATE_MESSAGES.PE_STATE_REQUEST_GETSRCCAP: result:='PE_STATE_REQUEST_GETSRCCAP';
    TPE_STATE_MESSAGES.PE_STATE_REQUEST_POWERSWAP: result:='PE_STATE_REQUEST_POWERSWAP';
    TPE_STATE_MESSAGES.PE_SRC_ANSWER_POWERSWAP: result:='PE_SRC_ANSWER_POWERSWAP';
    TPE_STATE_MESSAGES.PE_SRC_REQUEST_POWERSWAP_ACCEPTED: result:='PE_SRC_REQUEST_POWERSWAP_ACCEPTED';
    TPE_STATE_MESSAGES.PE_SRC_REQUEST_POWERSWAP_WAIT_PSREADY: result:='PE_SRC_REQUEST_POWERSWAP_WAIT_PSREADY';
    TPE_STATE_MESSAGES.PE_PRS_SRC_SWITCH2SNK: result:='PE_PRS_SRC_SWITCH2SNK';
    TPE_STATE_MESSAGES.PE_SNK_STARTUP: result:='PE_SNK_STARTUP';
    TPE_STATE_MESSAGES.PE_SNK_HARD_RESET_WAIT: result:='PE_SNK_HARD_RESET_WAIT';
    TPE_STATE_MESSAGES.PE_SNK_WAIT_FOR_CAPABILITIES: result:='PE_SNK_WAIT_FOR_CAPABILITIES';
    TPE_STATE_MESSAGES.PE_SNK_EVALUATE_CAPABILITY: result:='PE_SNK_EVALUATE_CAPABILITY';
    TPE_STATE_MESSAGES.PE_SNK_SEND_REQUEST: result:='PE_SNK_SEND_REQUEST';
    TPE_STATE_MESSAGES.PE_SNK_SELECT_CAPABILITY: result:='PE_SNK_SELECT_CAPABILITY';
    TPE_STATE_MESSAGES.PE_SNK_TRANSITION_SNK: result:='PE_SNK_TRANSITION_SNK';
    TPE_STATE_MESSAGES.PE_STATE_HARD_RESET2: result:='PE_STATE_HARD_RESET2';
    TPE_STATE_MESSAGES.PE_SNK_SRC_ASSERT_RP: result:='PE_SNK_SRC_ASSERT_RP';
    TPE_STATE_MESSAGES.PE_STATE_REQUEST_POWERSWAP_ANSWER: result:='PE_STATE_REQUEST_POWERSWAP_ANSWER';
    TPE_STATE_MESSAGES.PE_SNK_POWERSWAP_WAIT_PSREADY: result:='PE_SNK_POWERSWAP_WAIT_PSREADY';
    TPE_STATE_MESSAGES.PE_SNK_POWERSWAP_WAIT_SWAPTIMER: result:='PE_SNK_POWERSWAP_WAIT_SWAPTIMER';
    TPE_STATE_MESSAGES.PE_SRC_VDM_DISCOVERY_REQUEST_ANSWER: result:='PE_SRC_VDM_DISCOVERY_REQUEST_ANSWER';
    TPE_STATE_MESSAGES.PE_SNK_HARD_RESET_WAIT_VSAFE_0V: result:='PE_SNK_HARD_RESET_WAIT_VSAFE_0V';
    TPE_STATE_MESSAGES.PE_CAD_STATE_ATTACHED: result:='PE_CAD_STATE_ATTACHED';
    TPE_STATE_MESSAGES.PE_CAD_STATE_DETACHED: result:='PE_CAD_STATE_DETACHED';
    TPE_STATE_MESSAGES.PE_CAD_STATE_ATTACHED_WAIT: result:='PE_CAD_STATE_ATTACHED_WAIT';
    TPE_STATE_MESSAGES.PE_SRC_STARTUP: result:='PE_SRC_STARTUP';
    TPE_STATE_MESSAGES.PE_STATE_SEND_CTRLMESSAGE: result:='PE_STATE_SEND_CTRLMESSAGE';
    TPE_STATE_MESSAGES.PE_STATE_EXTENDED_WAITRESPONSE: result:='PE_STATE_EXTENDED_WAITRESPONSE';
    TPE_STATE_MESSAGES.PE_STATE_SEND_EXTENDED_MESSAGE: result:='PE_STATE_SEND_EXTENDED_MESSAGE';
    TPE_STATE_MESSAGES.PE_WAIT_DATARESPONSE: result:='PE_WAIT_DATARESPONSE';
    TPE_STATE_MESSAGES.PE_VCS_SEND_SWAP: result:='PE_VCS_SEND_SWAP';
    TPE_STATE_MESSAGES.PE_VCS_SEND_SWAP_ANSWER: result:='PE_VCS_SEND_SWAP_ANSWER';
    TPE_STATE_MESSAGES.PE_CABLE_VDM_DISCOVERY_REQUEST_ANSWER: result:='PE_CABLE_VDM_DISCOVERY_REQUEST_ANSWER';
    TPE_STATE_MESSAGES.PE_SVDM_REQ_GET_IDENTITY: result:='PE_SVDM_REQ_GET_IDENTITY';
    TPE_STATE_MESSAGES.PE_SVDM_WAIT_GET_IDENTITY: result:='PE_SVDM_WAIT_GET_IDENTITY';
    TPE_STATE_MESSAGES.PE_SVDM_REQ_GET_SVID: result:='PE_SVDM_REQ_GET_SVID';
    TPE_STATE_MESSAGES.PE_SVDM_WAIT_GET_SVID: result:='PE_SVDM_WAIT_GET_SVID';
  else
    begin
       result:='Unknown PE message !! #'+InttoStr(Ord(aState));
    end;
  end;
end;

end.

